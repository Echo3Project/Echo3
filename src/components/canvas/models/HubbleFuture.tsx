/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 -t -T -j hubble.gltf
*/

import { useGLTF, useKTX2 } from '@react-three/drei';
import React, { ReactElement } from 'react';
import { DoubleSide, Mesh, RepeatWrapping } from 'three';
import { GLTF } from 'three-stdlib';

import Audio from '../scenes/Audio';

type GLTFResult = GLTF & {
    nodes: {
        trefle: Mesh;
        sol: Mesh;
        godray01: Mesh;
        godray002: Mesh;
        godray003: Mesh;
        godray004: Mesh;
        godray005: Mesh;
        godray006: Mesh;
        arbre1: Mesh;
        arbre2: Mesh;
        arbre3: Mesh;
        Anneaux009: Mesh;
        Anneaux012: Mesh;
        Anneaux010: Mesh;
        Anneaux011: Mesh;
        Grand_anneaux002: Mesh;
        Cylinder001: Mesh;
    };
    materials: {};
};

export function Hubble(props: JSX.IntrinsicElements['group']): ReactElement {
    const { nodes } = useGLTF('/models/hubble-transformed.glb') as GLTFResult;
    const [
        arbres,
        matcap,
        sol_rough,
        sol_normal,
        sol_light,
        sol_color,
        sol_alpha,
        trefles_alpha,
        trefles_color,
        trefles_normal,
        trefles_occlusion,
        trefles_specular,
        trefles_light,
    ] = useKTX2([
        '/models/textures/arbres.ktx2',
        '/models/textures/matcap.ktx2',
        '/models/textures/sol_rough.ktx2',
        '/models/textures/sol_normal.ktx2',
        '/models/textures/sol_light.ktx2',
        '/models/textures/sol_color.ktx2',
        '/models/textures/sol_alpha.ktx2',
        '/models/textures/trefles_alpha.ktx2',
        '/models/textures/trefles_color.ktx2',
        '/models/textures/trefles_normal.ktx2',
        '/models/textures/trefles_occlusion.ktx2',
        '/models/textures/trefles_specular.ktx2',
        '/models/textures/trefles_light.ktx2',
    ]);

    [
        sol_color,
        sol_rough,
        sol_normal,
        trefles_color,
        trefles_normal,
        trefles_occlusion,
        trefles_specular,
    ].forEach((texture) => {
        // repaet texture
        texture.wrapS = texture.wrapT = RepeatWrapping;
        texture.repeat.set(10, 10);
    });
    return (
        <group
            {...props}
            dispose={null}
            scale={100}
            position={[-800, -185, 1024]}>
            <mesh
                geometry={nodes.trefle.geometry}
                position={[0.493, 1.275, 0.51]}
                scale={[57.474, 39.732, 57.474]}
                renderOrder={-5}>
                <meshPhongMaterial
                    attach="material"
                    map={trefles_color}
                    normalMap={trefles_normal}
                    aoMap={trefles_occlusion}
                    specularMap={trefles_specular}
                    lightMap={trefles_light}
                    alphaMap={trefles_alpha}
                    lightMapIntensity={0.5}
                    side={DoubleSide}
                    transparent
                />
            </mesh>
            <mesh
                geometry={nodes.sol.geometry}
                position={[0.493, 1.261, 0.51]}
                scale={[57.474, 39.732, 57.474]}
                renderOrder={-10}>
                <meshStandardMaterial
                    attach="material"
                    side={DoubleSide}
                    map={sol_color}
                    roughnessMap={sol_rough}
                    normalMap={sol_normal}
                    lightMap={sol_light}
                    lightMapIntensity={0.25}
                    alphaMap={sol_alpha}
                    transparent
                />
            </mesh>
            <mesh
                geometry={nodes.godray01.geometry}
                material={nodes.godray01.material}
                visible={false}
            />
            <mesh
                geometry={nodes.godray002.geometry}
                material={nodes.godray002.material}
                visible={false}
            />
            <mesh
                geometry={nodes.godray003.geometry}
                material={nodes.godray003.material}
                visible={false}
            />
            <mesh
                geometry={nodes.godray004.geometry}
                material={nodes.godray004.material}
                visible={false}
            />
            <mesh
                geometry={nodes.godray005.geometry}
                material={nodes.godray005.material}
                visible={false}
            />
            <mesh
                geometry={nodes.godray006.geometry}
                material={nodes.godray006.material}
                visible={false}
            />
            <mesh
                geometry={nodes.arbre1.geometry}
                position={[40.987, 1.715, -21.878]}
                rotation={[-Math.PI / 2, 0, 1.814]}
                scale={5.043}>
                <meshStandardMaterial
                    attach="material"
                    map={arbres}
                    toneMapped={false}
                    emissive={'white'}
                    emissiveIntensity={0.1}
                />
                <Audio />
            </mesh>
            <mesh
                geometry={nodes.arbre2.geometry}
                position={[16.032, 1.635, 35.853]}
                rotation={[-Math.PI / 2, 0, 1.112]}
                scale={4.551}>
                <meshStandardMaterial
                    attach="material"
                    map={arbres}
                    toneMapped={false}
                    emissive={'white'}
                    emissiveIntensity={0.1}
                />
                <Audio />
            </mesh>
            <mesh
                geometry={nodes.arbre3.geometry}
                position={[-32.903, 14.984, 2.386]}
                rotation={[-Math.PI / 2, 0, 2.969]}
                scale={5.242}>
                <meshStandardMaterial
                    attach="material"
                    map={arbres}
                    toneMapped={false}
                    emissive={'white'}
                    emissiveIntensity={0.1}
                />
                <Audio />
            </mesh>
            <mesh
                geometry={nodes.Anneaux009.geometry}
                material={nodes.Anneaux009.material}
                position={[-0.075, 10.86, 1.518]}
                rotation={[0.31, 0, Math.PI]}
                scale={[-6.165, 0.06, 6.165]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
            <mesh
                geometry={nodes.Anneaux012.geometry}
                material={nodes.Anneaux012.material}
                position={[-0.075, 12.13, 1.419]}
                rotation={[-0.699, 0, -Math.PI]}
                scale={[-5.303, 0.051, 5.303]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
            <mesh
                geometry={nodes.Anneaux010.geometry}
                material={nodes.Anneaux010.material}
                position={[-0.075, 12.15, 4.345]}
                rotation={[-0.699, 0, -Math.PI]}
                scale={[-1.885, 0.018, 1.885]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
            <mesh
                geometry={nodes.Anneaux011.geometry}
                material={nodes.Anneaux011.material}
                position={[-0.075, 10.936, 2.909]}
                rotation={[-0.338, 0, -Math.PI]}
                scale={[-3.729, 0.036, 3.729]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
            <mesh
                geometry={nodes.Grand_anneaux002.geometry}
                material={nodes.Grand_anneaux002.material}
                position={[-0.067, 12.257, 0.819]}
                rotation={[0.227, 0, Math.PI]}
                scale={[-6.437, 2.078, 6.384]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
            <mesh
                geometry={nodes.Cylinder001.geometry}
                material={nodes.Cylinder001.material}
                position={[-6.463, 12.186, 1.218]}
                rotation={[-0.187, -0.509, -1.504]}
                scale={[-0.639, 0.019, 0.543]}>
                <meshMatcapMaterial matcap={matcap} />
            </mesh>
        </group>
    );
}

useGLTF.preload('/models/hubble-transformed.glb');
